{"version":3,"sources":["const.ts","components/App/App.tsx","index.tsx"],"names":["Config","Colors","generateArray","count","Array","fill","map","Math","floor","random","App","props","containerRef","sortedArray","generateSortingElements","data","slice","it","i","style","height","transform","width","transition","className","swapElements","leftElement","rightElement","Promise","resolve","styleLeft","window","getComputedStyle","styleRight","transformLeft","getPropertyValue","requestAnimationFrame","setTimeout","current","insertBefore","state","isReverse","elementsCount","isSorting","initialArray","sortingElements","React","createRef","this","setState","prevState","ref","length","type","value","max","onChange","e","target","checked","name","id","htmlFor","disabled","onClick","sortElements","then","join","delay","elements","getElementsByClassName","j","backgroundColor","leftValue","Number","querySelector","innerHTML","rightValue","push","reverse","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b41b4d7.chunk.js","sourcesContent":["export const Config = {\r\n    elementWidth: 35, //px\r\n    elementRightMargin: 5, //px\r\n    transitionSpeed: 0.2, //sec\r\n    switchingDelay: 100, //ms\r\n    heightMultiplier: 3,\r\n    maxValue: 100,\r\n    defaultElementsCount: 10,\r\n    maxElementsCount: 45,\r\n}\r\n\r\nexport const Colors = {\r\n    elementDefault: `#9755c9`,\r\n    elementActive: `#c157af`,\r\n    elementDone: `#ac3469`,\r\n}\r\n","import React from 'react';\nimport {Colors, Config} from \"../../const\";\n\ntype State = {\n    isSorting: boolean\n    initialArray: number[]\n    sortingElements: JSX.Element[] | null\n    elementsCount: number\n    isReverse: boolean\n}\n\nconst generateArray = (count: number) => {\n    return new Array(count).fill(``).map(() => Math.floor(Math.random() * Config.maxValue))\n}\n\nclass App extends React.Component<{}, State> {\n    private readonly containerRef: React.RefObject<HTMLElement>;\n    private sortedArray: number[];\n\n    constructor(props = {}) {\n        super(props);\n\n        this.state = {\n            isReverse: false,\n            elementsCount: Config.defaultElementsCount,\n            isSorting: false,\n            initialArray: generateArray(Config.defaultElementsCount),\n            sortingElements: null\n        }\n\n        this.containerRef = React.createRef()\n        this.sortedArray = []\n    }\n\n    componentDidMount() {\n        this.setState({\n            sortingElements: this.generateSortingElements(this.state.initialArray)\n        })\n    }\n\n    componentDidUpdate(prevProps = {}, prevState: Readonly<State>) {\n        if (prevState.initialArray !== this.state.initialArray) {\n            this.setState({sortingElements: this.generateSortingElements(this.state.initialArray)})\n        }\n    }\n\n    render() {\n      return(\n      <div className=\"App\">\n          <header className=\"main-header\">Сортировка пузырьком</header>\n          <div className=\"data-wrapper\">\n              <section className=\"data-container\" ref={this.containerRef}\n                       style={{\n                           width: `${this.state.initialArray.length * (Config.elementWidth + Config.elementRightMargin)}px`\n                       }}>\n                  {this.state.sortingElements}\n              </section>\n          </div>\n          <section className=\"controls\">\n\n                  <input type=\"number\" className=\"controls__number-input\"\n                         value={this.state.elementsCount} max={Config.maxElementsCount}\n                         onChange={(e) => {\n                          if (+e.target.value <= Config.maxElementsCount && +e.target.value > 0) {\n                              this.setState({elementsCount: +e.target.value})\n                          }\n                      }\n                  }/>\n                  <div className=\"controls__radio-wrapper\">\n                      <div>\n                          <input type=\"radio\" checked={!this.state.isReverse} name=\"sort\" id=\"sort1\"\n                                  onChange={() => this.setState({isReverse: false})}/>\n                          <label htmlFor=\"sort1\">По возрастанию</label>\n                      </div>\n                      <div>\n                          <input type=\"radio\" checked={this.state.isReverse} name=\"sort\" id=\"sort2\"\n                                  onChange={() => this.setState({isReverse: true})}/>\n                          <label htmlFor=\"sort2\">По убыванию</label>\n                      </div>\n                  </div>\n                  <button className=\"controls__generate-button\" disabled={this.state.isSorting} onClick={() => {\n                      this.setState({\n                          initialArray: generateArray(this.state.elementsCount),\n                      })\n                      this.sortedArray = [];\n                  }}>Сгенерировать</button>\n\n              <button className=\"controls__start-button\" onClick={() => {\n                  this.setState({ isSorting: true })\n                  this.sortElements()\n                      .then(() => this.setState({ isSorting: false }))\n              }} disabled={this.state.isSorting}>Начать</button>\n\n              <div className=\"result\">\n                  <p>Изначальный массив: {this.state.initialArray.join(`, `)}</p>\n                  <p>Отсортированный массив: {!this.state.isSorting && this.sortedArray.join(`, `)}</p>\n              </div>\n          </section>\n          <p className=\"info\">\n              Нажмите на кнопку \"Начать\", что бы запустить процесс сортировки. <br/>\n              Изначально генерируется массив из 10 элементов. <br/>\n              Вы можете перегенерировать массив, указав любое другое количество элементов в поле ввода (до 45),\n              и нажав кнопку \"Сгенерировать\". <br/>\n              Так же, вы можете изменить порядок сортировки, выбрав один из двух вариантов.\n          </p>\n      </div>\n  )};\n\n    generateSortingElements = (data: number[]) => {\n       return data.slice().map((it, i) => {\n           const style = {\n               height: `${it * Config.heightMultiplier}px`,\n               transform: `translateX(${i * (Config.elementWidth + Config.elementRightMargin)}px)`,\n               width: `${Config.elementWidth}px`,\n               transition: `${Config.transitionSpeed}s all ease`,\n           }\n           return (\n               <div key={Math.random()} className={`sorting-element`} style={style}>\n                   <p>{it}</p>\n               </div>\n           )\n       })\n    }\n\n    swapElements = (leftElement: any, rightElement: any) => {\n        return new Promise(resolve => {\n            const styleLeft = window.getComputedStyle(leftElement);\n            const styleRight = window.getComputedStyle(rightElement);\n            const transformLeft = styleLeft.getPropertyValue(\"transform\");\n\n            leftElement.style.transform = styleRight.getPropertyValue(\"transform\");\n            rightElement.style.transform = transformLeft;\n\n            window.requestAnimationFrame(() => {\n                setTimeout(() => {\n                    this.containerRef.current!.insertBefore(rightElement, leftElement);\n                    resolve();\n                }, 250);\n            });\n        });\n    }\n\n    async sortElements(delay = Config.switchingDelay) {\n        let elements = this.containerRef.current!\n            .getElementsByClassName(`sorting-element`) as HTMLCollectionOf<HTMLElement>\n\n        this.sortedArray = []\n\n        for (let i = 0; i < elements.length - 1; i++) {\n            for (let j = 0; j < elements.length - i - 1; j++) {\n                elements[j].style.backgroundColor = Colors.elementActive;\n                elements[j + 1].style.backgroundColor = Colors.elementActive;\n\n                await new Promise(resolve =>\n                    setTimeout(() => {\n                        resolve();\n                    }, delay)\n                );\n\n                const leftValue = Number(elements[j].querySelector(`p`)!.innerHTML);\n                const rightValue = Number(elements[j + 1].querySelector(`p`)!.innerHTML);\n\n                if (!this.state.isReverse) {\n                    if (leftValue > rightValue) {\n                        await this.swapElements(elements[j], elements[j + 1]);\n                    }\n                } else {\n                    if (leftValue < rightValue) {\n                        await this.swapElements(elements[j], elements[j + 1]);\n                    }\n                }\n\n                elements[j].style.backgroundColor = Colors.elementDefault;\n                elements[j + 1].style.backgroundColor = Colors.elementDefault;\n            }\n            this.sortedArray.push(Number(elements[elements.length - i - 1].querySelector(`p`)!.innerHTML))\n            elements[elements.length - i - 1].style.backgroundColor = Colors.elementDone;\n        }\n        this.sortedArray.push(Number(elements[0].querySelector(`p`)!.innerHTML))\n        this.sortedArray.reverse()\n        elements[0].style.backgroundColor = Colors.elementDone;\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}