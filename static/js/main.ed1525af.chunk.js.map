{"version":3,"sources":["const.ts","App.tsx","index.tsx"],"names":["Config","Colors","generateArray","count","Array","fill","map","Math","floor","random","App","props","containerRef","sortedArray","sortingElements","generateSortingElements","data","slice","it","i","style","height","transform","width","transition","className","swapElements","leftElement","rightElement","Promise","resolve","styleLeft","window","getComputedStyle","styleRight","transformLeft","getPropertyValue","setTimeout","current","insertBefore","state","isReverse","elementsCount","isSorting","initialArray","React","createRef","prevState","this","forceUpdate","ref","length","type","value","max","onChange","e","target","setState","checked","name","id","htmlFor","disabled","onClick","sortElements","then","join","delay","elements","getElementsByClassName","j","backgroundColor","leftValue","querySelector","innerHTML","rightValue","push","Number","reverse","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed1525af.chunk.js","sourcesContent":["export const Config = {\r\n    elementWidth: 35, //px\r\n    elementRightMargin: 5, //px\r\n    transitionSpeed: 0.2, //sec\r\n    switchingDelay: 100, //ms\r\n    heightMultiplier: 3,\r\n    maxValue: 100,\r\n    defaultElementsCount: 10,\r\n    maxElementsCount: 45,\r\n}\r\n\r\nexport const Colors = {\r\n    elementDefault: `#9755c9`,\r\n    elementActive: `#c157af`,\r\n    elementDone: `#ac3469`,\r\n}\r\n","import React from 'react';\nimport { Colors, Config } from \"./const\";\n\ntype State = {\n   isSorting: boolean\n   initialArray: number[]\n   elementsCount: number\n   isReverse: boolean\n}\n\n/* Функция генерации массива данных, принимает на вход количество элементов */\nconst generateArray = (count: number) => {\n   return new Array(count).fill(``).map(() => Math.floor(Math.random() * Config.maxValue))\n}\n\nclass App extends React.Component<{}, State> {\n   private readonly containerRef: React.RefObject<HTMLElement>;\n   private sortedArray: number[];\n   private sortingElements: null | JSX.Element[];\n\n   constructor(props = {}) {\n      super(props);\n\n      this.state = {\n         isReverse: false, // флаг, отвечающий за направление сортировки\n         elementsCount: Config.defaultElementsCount, // количество элементов для генерации, изменяется пользователем\n         isSorting: false, // флаг, следящий за тем, идет ли сортировка в данный момент времени\n         initialArray: generateArray(Config.defaultElementsCount), // изначальный массив данных\n      }\n\n      this.containerRef = React.createRef() // реф, для работы с контейнером элементов\n      this.sortedArray = [] // отсортированный массив\n      this.sortingElements = this.generateSortingElements(this.state.initialArray) // jsx элементы для сортировки\n   }\n\n   componentDidUpdate(prevProps = {}, prevState: Readonly<State>) { // проверяем, изменился ли массив данных\n      if (prevState.initialArray !== this.state.initialArray) { // если да, перерисовываем элементы с новыми данными\n         this.sortingElements = this.generateSortingElements(this.state.initialArray)\n         this.forceUpdate()\n      }\n   }\n\n   render() {\n      return (\n         <div className=\"App\">\n            <header className=\"main-header\">Сортировка пузырьком</header>\n            <div className=\"data-wrapper\">\n               {/* Контейнер для элементов сортировки, считает ширину исходя из количества элементов */}\n               <section className=\"data-container\" ref={this.containerRef}\n                        style={{ width: `${this.state.initialArray.length * \n                           (Config.elementWidth + Config.elementRightMargin)}px` }}>\n                  {this.sortingElements}\n               </section>\n            </div>\n            {/* Инпут ввода количества элементов проверяет значение и делает двухсторонний датабиндинг со стейтом */}\n            <section className=\"controls\">\n               <input type=\"number\" className=\"controls__number-input\"\n                      value={this.state.elementsCount} max={Config.maxElementsCount}\n                      onChange={(e) => {\n                         if (+e.target.value <= Config.maxElementsCount && +e.target.value > 0) {\n                            this.setState({elementsCount: +e.target.value})\n                         }\n                      }}\n               />\n               {/* Радио кнопки переключают режимы сортировки */}\n               <div className=\"controls__radio-wrapper\">\n                  <div>\n                     <input type=\"radio\" checked={!this.state.isReverse} name=\"sort\" id=\"sort1\"\n                            onChange={() => this.setState({isReverse: false})}/>\n                     <label htmlFor=\"sort1\">По возрастанию</label>\n                  </div>\n                  <div>\n                     <input type=\"radio\" checked={this.state.isReverse} name=\"sort\" id=\"sort2\"\n                            onChange={() => this.setState({isReverse: true})}/>\n                     <label htmlFor=\"sort2\">По убыванию</label>\n                  </div>\n               </div>\n               {/* Кнопка генерации нового массива, обновляет массив в стейте и обновляет отсортированный */}\n               <button className=\"controls__generate-button\" disabled={this.state.isSorting} onClick={() => {\n                  this.setState({ initialArray: generateArray(this.state.elementsCount) })\n                  this.sortedArray = [];\n                  }}>Сгенерировать\n               </button>\n               {/* Кнопка старта, при нажатии переводит приложение в режим активной сортировки, после резолва промиса\n                переводит обратно в неактивный режим */}\n               <button className=\"controls__start-button\" onClick={() => {\n                  this.setState({isSorting: true})\n                  this.sortElements().then(() => this.setState({isSorting: false}))\n               }} disabled={this.state.isSorting}>Начать\n               </button>\n               <div className=\"result\">\n                  <p>Изначальный массив: {this.state.initialArray.join(`, `)}</p>\n                  <p>Отсортированный массив: {!this.state.isSorting && this.sortedArray.join(`, `)}</p>\n               </div>\n            </section>\n            <p className=\"info\">\n               Нажмите на кнопку \"Начать\", что бы запустить процесс сортировки. <br/>\n               Изначально генерируется массив из 10 элементов. <br/>\n               Вы можете перегенерировать массив, указав любое другое количество элементов в поле ввода (до 45),\n               и нажав кнопку \"Сгенерировать\". <br/>\n               Так же, вы можете изменить порядок сортировки, выбрав один из двух вариантов.\n            </p>\n         </div>\n      )\n   };\n   /* Функция, для генерации дом элементов, принимает на вход массив чисел, возвращает массив дом элементов */\n   generateSortingElements = (data: number[]) => {\n      return data.slice().map((it, i) => {\n         const style = {\n            height: `${it * Config.heightMultiplier}px`,\n            transform: `translateX(${i * (Config.elementWidth + Config.elementRightMargin)}px)`,\n            width: `${Config.elementWidth}px`,\n            transition: `${Config.transitionSpeed}s all ease`,\n         }\n         return (\n            <div key={Math.random()} className={`sorting-element`} style={style}>\n               <p>{it}</p>\n            </div>\n         )\n      })\n   }\n   /* Функция меняющая местами 2 элемента, принимает их на вход, возвращает промис */\n   swapElements = (leftElement: any, rightElement: any) => {\n      return new Promise(resolve => {\n         const styleLeft = window.getComputedStyle(leftElement);\n         const styleRight = window.getComputedStyle(rightElement);\n         const transformLeft = styleLeft.getPropertyValue(\"transform\");\n         // получаем стили отступов у элементов и присваиваем их друг другу, тем самым включая transition\n         leftElement.style.transform = styleRight.getPropertyValue(\"transform\");\n         rightElement.style.transform = transformLeft;\n\n         setTimeout(() => {\n            //после завершения анимации меняем местами сами элементы в контейнере\n            this.containerRef.current!.insertBefore(rightElement, leftElement);\n            resolve();\n         }, (Config.transitionSpeed * 1000 + 50));\n         // для delay берем скорость из transition и добавляем 50мс,\n         // что бы быть уверенным, что анимация завершилась\n      });\n   }\n   /* Функция сортировки элементов, принимает на вход задержку сортировки между 2 элементами, возвращает промис */\n   async sortElements(delay = Config.switchingDelay) {\n      let elements = this.containerRef.current!\n         .getElementsByClassName(`sorting-element`) as HTMLCollectionOf<HTMLElement>\n      // получим с помощью рефа коллекцию элементов и обнулим итоговый массив\n      this.sortedArray = []\n\n      for (let i = 0; i < elements.length - 1; i++) {\n         for (let j = 0; j < elements.length - i - 1; j++) {\n            elements[j].style.backgroundColor = Colors.elementActive;\n            elements[j + 1].style.backgroundColor = Colors.elementActive;\n            // выделим активные элементы и вызовем задержку между сравнениями\n            await new Promise(resolve => setTimeout(() => resolve(), delay));\n            // найдем значения элементов\n            const leftValue = +elements[j].querySelector(`p`)!.innerHTML;\n            const rightValue = +elements[j + 1].querySelector(`p`)!.innerHTML;\n            // проверяем направление сортировки и сравниваем значения между собой\n            if (!this.state.isReverse) {\n               if (leftValue > rightValue) {\n                  await this.swapElements(elements[j], elements[j + 1]);\n               }\n            } else {\n               if (leftValue < rightValue) {\n                  await this.swapElements(elements[j], elements[j + 1]);\n               }\n            }\n            // после завершения работы с элементами, возвращаем им дефолтный цвет\n            elements[j].style.backgroundColor = Colors.elementDefault;\n            elements[j + 1].style.backgroundColor = Colors.elementDefault;\n         }\n         // красим финальный элемент и пушим его в отсортированный массив\n         this.sortedArray.push(Number(elements[elements.length - i - 1].querySelector(`p`)!.innerHTML))\n         elements[elements.length - i - 1].style.backgroundColor = Colors.elementDone;\n      }\n      // пушим финальный элемент и переворачиваем массив\n      // конечно, можно было бы обойтись методом .sort(), но такая сортировка выглядит честнее\n      this.sortedArray.push(Number(elements[0].querySelector(`p`)!.innerHTML))\n      this.sortedArray.reverse()\n      elements[0].style.backgroundColor = Colors.elementDone;\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App/>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}